这是刷题日记，可以直接通过Ctrl + F查找4位数题号快速找到所需题目的位置。

2020.04.04 晚上
今天于知乎听说Leetcode，相见恨晚，遂始尝试一简单题。
题目0001（Solution_0001）要求在数组（列表）中寻找和为给定值的两数。
一开始的想法自然是两个循环嵌套，但是如此一来时间复杂度就上去了——第一次提交耗时接近5秒。
第二个想法即使受了启发决定使用python自带的字典数据类型，以其快速索引的特点避免第二个循环。
结果于是十分理想，耗时不足50ms，效率提高了百倍。
后来经过一些简单命令的优化，达到了现在的40ms，击败了90%的用户。
并且，本次刷题时遇到的文件模板刷新了我对python类定义的认知——第一次见没有继承和__init__()的类。
算是开了好头，但是太晚了，还是睡觉为妙，往后多刷多练，益寿延年。

2020.04.05 早上
昨日一试，欲罢不能，今日继续。
最初苦于python没有指针可使用，查找了许久的相关资料，而后悟——自建对象的实例名可以当指针用。
题目0002（Solution_0002）要求返回两个输入的整数链表的整数的和的链表。（我tm在说啥？）
方法1失败，输入[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[5,6,4]时，
输出不正确，判断为int类型溢出，即题意不允许使用int加法实现，必须自底层实现单个数位的相加与进位。
计划下午或者晚上，先写个合适的测试函数，再作定夺。

2020.04.05 下午
查了一下，发现python的int类型是不会溢出的，至于问题出在什么地方，自然需要好好调试排查一下。
调通了，问题似乎出在int(n3 / 10)一句中，改成n3 // 10即可。（可能int类型不溢出，但int()函数会溢出？）
运行耗时击败了八成多的用户，但是内存消耗较高，排在了最高的5%里。还是可以改进的。晚上有空试试。

2020.04.05 晚上
在测试函数中编写了方便的int2ListNode()和ListNode2int()，可在测试函数内部直接调用。
可能有人觉得这个结构还挺蛋疼的，但思前想后，这是能想到的最好的结构了吧。
毕竟改进计划是基于单个数位的相加与进位的，这个函数还真只能在测试中用到了。
经过一轮紧张又刺激的调试，实现了改进计划了，然而如此跑出来的时间反而更长了，实在费解。
获得的经验也是有一点的，比如说使用(l1 and l1.next)来避免因l1为None或0引起的报错。
后试将方法1模块化，再提交发现用时也还是长了，与方法2相当，实在费解。
大概便是一日一题的速度？尝试明天按这个节奏把第0003题拿下。